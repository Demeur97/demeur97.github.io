# -*- coding: utf-8 -*-

API_TOKEN = '7185791418:AAFrwICeIz5Z6LC5cc5_nlzRgc4qwzdrztQ'

import telebot
import mysql.connector
from telebot import types
import logging

CHANNEL_ID = '@projectaprils' # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∫–∞–Ω–∞–ª–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def db_connect():
    try:
        conn = mysql.connector.connect(
            host='server41.hosting.reg.ru',
            user='u2722842_eugpriv',
            passwd='eugprivEUGPRIV',
            database='u2722842_referal'
        )
        return conn
    except mysql.connector.Error as err:
        logging.error(f"Error: {err}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_database():
    conn = db_connect()
    if conn is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
        return
    cursor = conn.cursor()
    try:
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS referrals (
                userId INT PRIMARY KEY,
                userName VARCHAR(255),
                referralId INT,
                score INT DEFAULT 0,
                last_used TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        logging.info("–¢–∞–±–ª–∏—Ü–∞ referrals —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except mysql.connector.Error as err:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {err}")
    finally:
        conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message, call=None):
    user_info = message.from_user
    referral_id = None
    if len(message.text.split()) > 1:
        ref_arg = message.text.split()[1]
        if ref_arg.startswith('ref'):
            referral_id = ref_arg[3:]
            if not referral_id.isdigit():
                referral_id = None
        else:
            referral_id = None
    save_referral(user_id=user_info.id, user_name=user_info.first_name, referral_id=referral_id)
    
    conn = db_connect()
    if conn is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    cursor = conn.cursor()
    cursor.execute('SELECT score FROM referrals WHERE userId = %s', (user_info.id,))
    result = cursor.fetchone()
    conn.close()
    
    if result is None:
        score = 0
    else:
        score = result[0]
    
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç {user_info.first_name}!\n"
        f"–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è {score} üßÄ.\n"
        "–°–µ–π—á–∞—Å –æ–Ω–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ç–æ—è—Ç, –Ω–æ –≤—Å—ë –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º, –∫—Ç–æ –∑–Ω–∞–µ—Ç...\n"
        "–ü—Ä–∏—É–º–Ω–æ–∂–∞–π—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π. –ò –ø–æ–º–Ω–∏, —á—Ç–æ –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ–±—è!"
    )
    
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Mini app SOON', callback_data='mini_app')
    btn2 = types.InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data='invite_friends')
    btn3 = types.InlineKeyboardButton('–ó–∞–¥–∞–Ω–∏—è', callback_data='tasks')
    btn4 = types.InlineKeyboardButton('–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data='score')
    markup.add(btn1)
    markup.add(btn2)
    markup.add(btn3)
    markup.add(btn4)
    
    if call:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=welcome_text, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

@bot.message_handler(commands=['ref'])
def ref(message, call=None):
    user_info = message.from_user
    user_id = user_info.id
    referral_link = f"https://t.me/ProjectAprilBot?start=ref{user_id}"
    markup = types.InlineKeyboardMarkup()
    forward_button = types.InlineKeyboardButton('–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É', switch_inline_query=f"{referral_link}")
    tasks_button = types.InlineKeyboardButton('–ó–∞–¥–∞–Ω–∏—è', callback_data='tasks')
    score_button = types.InlineKeyboardButton('–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data='score')
    markup.add(forward_button)
    markup.add(tasks_button)
    markup.add(score_button)
    if call:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π: {referral_link}", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π: {referral_link}", reply_markup=markup)
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks
@bot.message_handler(commands=['tasks'])
def tasks(message, call=None):
    user_info = message.from_user
    task_text = "–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥."
    button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É - 100 üßÄ", url="https://t.me/projectaprils")
    score_button = types.InlineKeyboardButton('–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data='score')
    reply_markup = types.InlineKeyboardMarkup().add(button).add(score_button)
    if call:
        msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=task_text, reply_markup=reply_markup)
    else:
        msg = bot.send_message(message.chat.id, task_text, reply_markup=reply_markup)
    
    if check_subscription(user_info.id):
        add_score(user_info.id, 100)
        new_button = types.InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ", callback_data="subscribed")
        new_reply_markup = types.InlineKeyboardMarkup().add(new_button).add(score_button)
        bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=msg.message_id, reply_markup=new_reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /score
@bot.message_handler(commands=['score'])
def score(message, call=None):
    user_info = message.from_user
    conn = db_connect()
    if conn is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    cursor = conn.cursor()
    cursor.execute('SELECT score FROM referrals WHERE userId = %s', (user_info.id,))
    result = cursor.fetchone()
    conn.close()
    
    if result is None:
        score = 0
    else:
        score = result[0]
    
    score_text = f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ {score} üßÄ"
    tasks_button = types.InlineKeyboardButton('–ó–∞–¥–∞–Ω–∏—è', callback_data='tasks')
    invite_button = types.InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data='invite_friends')
    reply_markup = types.InlineKeyboardMarkup().add(tasks_button).add(invite_button)
    
    if call:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=score_text, reply_markup=reply_markup)
    else:
        bot.send_message(message.chat.id, score_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in ['invite_friends', 'tasks', 'score'])
def handle_inline_buttons(call):
    print(f"Button pressed: {call.data}")
    if call.data == 'invite_friends':
        ref(call.message, call)
    elif call.data == 'tasks':
        tasks(call.message, call)
    elif call.data == 'score':
        score(call.message, call)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
def save_referral(user_id, user_name, referral_id):
    conn = db_connect()
    if conn is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO referrals (userId, userName, referralId, last_used)
        VALUES (%s, %s, %s, CURRENT_TIMESTAMP)
        ON DUPLICATE KEY UPDATE last_used = CURRENT_TIMESTAMP
    ''', (user_id, user_name, referral_id))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription(user_id):
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
def add_score(user_id, score):
    conn = db_connect()
    if conn is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    cursor = conn.cursor()
    cursor.execute('UPDATE referrals SET score = score + %s WHERE userId = %s', (score, user_id))
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
initialize_database()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
